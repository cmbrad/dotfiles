#!/usr/bin/env bash

# content is edited from https://www.mikekasberg.com/blog/2021/06/28/my-new-bash-prompt.html
# https://github.com/mkasberg/dotfiles/blob/99c51be200ad7b81a7a5c26ccf947259ad8a29d8/executable_dot_mkps1.sh#L3-L8

# Configuration

# git - only load if the prompt is provided by the system
GIT_SH_PROMPT_PATH=/usr/lib/git-core/git-sh-prompt
if [[ -f "$GIT_SH_PROMPT_PATH" ]]; then
    source /usr/lib/git-core/git-sh-prompt
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export GIT_PS1_SHOWCONFLICTSTATE=conflict
fi

# For python virtual env disable venv default prompt since we customise it
export VIRTUAL_ENV_DISABLE_PROMPT=1

# hostname in prompt - uncomment to show
# PROMPT_SHOW_HOSTNAME=1

# signal bell when command fails
PROMPT_BELL_ON_FAIL=1

__prompt_debian_chroot() {
    if ! [[ -z "$debian_chroot" ]] ; then
        echo " (üíª $(__font ${fg_orange} "$debian_chroot"))"
    fi
}

__prompt_aws() {
    # try and include both profile and region if set
    if ! [[ -z "$AWS_PROFILE" ]] && ! [[ -z "$AWS_REGION" ]] ; then
        echo " (‚õÖ $(__font ${fg_yellowgreen} "${AWS_PROFILE}")@$(__font ${fg_yellowgreen} "${AWS_REGION}"))"
    fi
    # if AWS_PROFILE is set but without region then leave the region out of it
    if ! [[ -z "$AWS_PROFILE" ]] && [[ -z "$AWS_REGION" ]] ; then
        echo " (‚õÖ $(__font ${fg_yellowgreen} "${AWS_PROFILE}"))"
    fi
}

__prompt_kubeconfig() {
    if ! [[ -z "$KUBECONFIG" ]] ; then
        echo " (üåå $(__font ${fg_pink} "$(basename "$KUBECONFIG" .yml)"))"
    fi
}

__prompt_exit_code() {
    # only show non 0 codes to save space
    if [[ "$exit_code" -ne "0" ]]; then
        res="$(__font ${bg_red}${fg_white} " $exit_code ")"

        # if enabled then bell on failure
        if ! [[ -z "$PROMPT_BELL_ON_FAIL" ]]; then
            res="${res}\a"
        fi

        echo "$res"
    fi
}

__prompt_time() {
    echo "$(__font ${bg_gray}${fg_white} " \t ")"
}

__prompt_userhost() {
    # always show username but allow hiding hostname as it may not be helpful
    if ! [[ -z "$PROMPT_SHOW_HOSTNAME" ]]; then
        echo " $(__font ${bold}${fg_yellow} "\u")@$(__font ${bold}${fg_yellow} "\h")"
    else
        echo " $(__font ${bold}${fg_yellow} "\u")"
    fi
}

__prompt_workdir() {
    echo " $(__font ${bold}${fg_lightgreen} "\w")"
}

__prompt_python_venv() {
    # only add env information if a virtualenv is activated
    if ! [[ -z "$VIRTUAL_ENV" ]] ; then
        # if using direnv then get the actual project name
        if ! [[ "$VIRTUAL_ENV" =~ ^.+/\.direnv/.+$ ]]; then
            echo " ($(__font ${fg_purple} "üêç $(basename "${VIRTUAL_ENV}")"))"
        else
            # example: /home/cmbrad/projects/asus_exporter/.direnv/python-3.10
            # call dirname twice to get the 3rd last directory
            echo " ($(__font ${fg_purple} "üêç $(basename $(dirname $(dirname "${VIRTUAL_ENV}")))"))"
        fi
    fi
}

__prompt_box_top() {
    echo "$(__font ${fg_yellow} "‚ï≠")"
}

__prompt_box_bottom() {
    echo "$(__font ${fg_yellow} "‚ï∞")"
}

__prompt_git() {
    if [[ -f "$GIT_SH_PROMPT_PATH" ]]; then
        # Escaping the $ is intentional as otherwise we get artifcts
        echo "\$(__git_ps1 ' (üìö $(__font ${bold}${fg_yellow} "%s"))')"
    fi
}

__prompt_user_prompt() {
    echo "$(__font ${bold}${fg_yellow} "‚ñ∂") ";
}

__font() {
    echo "\[${@:1:$#-1}\]${@:$#}\[${reset}\]"
}

__prompt() {
    # cache exit code so we don't lose it
    local exit_code=$?

    # colors
    # ref: https://gist.github.com/dtmilano/4055d6df5b6e4ea87c5a72dc2d604193
    # effects
    local bold=`tput bold`
    # background
    local bg_red=`tput setab 1`;
    local bg_gray=`tput setab 240`;
    # foreground
    local fg_white=`tput setaf 7`;
    local fg_lightgreen=`tput setaf 42`
    local fg_yellow=`tput setaf 227`
    local fg_purple=`tput setaf 98`
    local fg_pink=`tput setaf 198`
    local fg_orange=`tput setaf 202`
    local fg_yellowgreen=`tput setaf 190`
    # special
    local reset=`tput sgr0`

    # construct prompt - use each line to symbolise a line of the real 
    # start with \n so that we have a gap between the output of the prior result
    PS1="\n"
    PS1+="$(__prompt_box_top)$(__prompt_exit_code)$(__prompt_time)$(__prompt_userhost)$(__prompt_workdir)$(__prompt_debian_chroot)$(__prompt_aws)$(__prompt_kubeconfig)$(__prompt_python_venv)$(__prompt_git)\n"
    PS1+="$(__prompt_box_bottom)$(__prompt_user_prompt)"
}

# set prompt
PROMPT_COMMAND=__prompt
